/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bill.metronome.ui;

/**
 *
 * @author Bill
 */
import com.bill.metronome.utils.MidiHandler;
import java.awt.Image;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author Bill
 */
public class MainWindow extends javax.swing.JFrame
{
    private MidiHandler mh;
    private boolean isPlaying=false;

    /**
     * Creates the application's main window
     */
    public MainWindow()
    {
        initComponents();
        initImg();
        initLabels();
        createImg();
        this.mh= new MidiHandler(this);
        //mh.setAudioTrack("res//4_4.mid");
        mh.setAudioTrack("midi/4_4.mid");
        mh.setupHandler();
        nextBeat=0;
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        header = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        main_body = new javax.swing.JPanel();
        bpmModifier = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        timeSignature = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(300, 300));
        setName("mainframe"); // NOI18N

        jLabel1.setText("Metronome Parameters");

        javax.swing.GroupLayout headerLayout = new javax.swing.GroupLayout(header);
        header.setLayout(headerLayout);
        headerLayout.setHorizontalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerLayout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        headerLayout.setVerticalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerLayout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        bpmModifier.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(120.0f), Float.valueOf(0.0f), Float.valueOf(240.0f), Float.valueOf(1.0f)));
        bpmModifier.setName("bpmSpinner"); // NOI18N
        bpmModifier.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                bpmModifierStateChanged(evt);
            }
        });

        jLabel2.setText("BPM");

        timeSignature.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "4/4", "3/4", "6/8", "12/8" }));
        timeSignature.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                timeSignatureItemStateChanged(evt);
            }
        });

        jLabel3.setText("Time Signature");

        javax.swing.GroupLayout main_bodyLayout = new javax.swing.GroupLayout(main_body);
        main_body.setLayout(main_bodyLayout);
        main_bodyLayout.setHorizontalGroup(
            main_bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, main_bodyLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(main_bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(main_bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(timeSignature, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bpmModifier, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );
        main_bodyLayout.setVerticalGroup(
            main_bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_bodyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(main_bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bpmModifier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(main_bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeSignature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        startButton.setLabel("Start");
        startButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                startButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 116, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(115, 115, 115))
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(main_body, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(startButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(main_body, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        header.getAccessibleContext().setAccessibleName("Header");
        main_body.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bpmModifierStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bpmModifierStateChanged
       
        //Change bpm according to user input
        mh.setBPM((float) bpmModifier.getValue());
    }//GEN-LAST:event_bpmModifierStateChanged

    private void startButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_startButtonMouseClicked
    {//GEN-HEADEREND:event_startButtonMouseClicked
        if(isPlaying)//If the metronome is already playing stop
        {
            mh.stopTrack();
            startButton.setText("Start");
            timeSignature.setEnabled(true);  
            isPlaying=false;
            mh.getSequencer().setTickPosition(0);
            System.out.println("Stopping.. Next beat: "+nextBeat);
            nextBeat=0;
            clearBeats();
        }
        else//If the metronome isn't playing, start the loop
        {
            nextBeat=0;
            System.out.println("Starting.. Next beat: "+nextBeat);
            timeSignature.setEnabled(false);
            mh.playTrack((float) bpmModifier.getValue());
            startButton.setText("Stop");
            isPlaying=true; 
        }
       
    }//GEN-LAST:event_startButtonMouseClicked
    
    /**
     *
     * @return the value of the next beat
     */
    public int getNextBeat()
    {
       return this.nextBeat;
    }
    
    /**
     *
     * @param beat
     */
    public void setNextBeat(int beat)
    {
       this.nextBeat=beat;
    }
    
    private void initLabels()//JLabel initialization
    {
        beat0 = new JLabel(beatOffIcon,JLabel.CENTER);
        beat1 = new JLabel(beatOffIcon,JLabel.CENTER);
        beat2 = new JLabel(beatOffIcon,JLabel.CENTER);
        beat3 = new JLabel(beatOffIcon,JLabel.CENTER);
        beat4 = new JLabel(beatOffIcon,JLabel.CENTER);
        beat5 = new JLabel(beatOffIcon,JLabel.CENTER);
        beat6 = new JLabel(beatOffIcon,JLabel.CENTER);
        beat7 = new JLabel(beatOffIcon,JLabel.CENTER);
        beat8 = new JLabel(beatOffIcon,JLabel.CENTER);
        beat9 = new JLabel(beatOffIcon,JLabel.CENTER);
        beat10 = new JLabel(beatOffIcon,JLabel.CENTER);
        beat11 = new JLabel(beatOffIcon,JLabel.CENTER);
        
        main_body.add(beat0);
        main_body.add(beat1);
        main_body.add(beat2);
        main_body.add(beat3);
        main_body.add(beat4);
        main_body.add(beat5);
        main_body.add(beat6);
        main_body.add(beat7);
        main_body.add(beat8);
        main_body.add(beat9);
        main_body.add(beat10);
        main_body.add(beat11);
        
    }
    
    private void clearBeats()
    {
        beat0.setIcon(beatOffIcon);
        beat1.setIcon(beatOffIcon);
        beat2.setIcon(beatOffIcon);
        if(timeSignature.getSelectedIndex()==0)//If the 4/4 time signature is used clear the additional beat icons that might be unused
        {
            beat3.setIcon(beatOffIcon);
        }
        else if(timeSignature.getSelectedIndex()==2)//If the 6/8 time signature is used
        {
            beat1.setIcon(accentBeatOff);
            beat2.setIcon(accentBeatOff);
            beat3.setIcon(beatOffIcon);
            beat4.setIcon(accentBeatOff);
            beat5.setIcon(accentBeatOff);
        }
        else if(timeSignature.getSelectedIndex()==3)//If the 12/8 time signature is used
        {
            beat0.setIcon(accentBeatOff);
            beat1.setIcon(accentBeatOff);
            beat2.setIcon(accentBeatOff);
            beat3.setIcon(beatOffIcon);
            beat4.setIcon(accentBeatOff);
            beat5.setIcon(accentBeatOff);
            beat6.setIcon(accentBeatOff);
            beat7.setIcon(accentBeatOff);
            beat8.setIcon(accentBeatOff);
            beat9.setIcon(beatOffIcon);
            beat10.setIcon(accentBeatOff);
            beat11.setIcon(accentBeatOff);
        }
    }
    
    /**
     * Setter Method that manipulates the beat visualization icons
     * @param beat the current beat of the measure
     * @param on boolean flag that determines whether the beat is a noteOn or noteOff
     */
    public void setIcon(int beat, boolean on)
    {
        if(beat==0)
        {
            if(on)
            {
                if(timeSignature.getSelectedIndex()==3)//If the 12/8 time signature is selected, use the accent beat image
                {
                    beat0.setIcon(accentBeatOn);
                }
                else
                {
                    beat0.setIcon(beatOnIcon);
                }   
            }
            else
            {
                if(timeSignature.getSelectedIndex()==3)
                {
                    beat0.setIcon(accentBeatOff);
                }
                else
                {
                    beat0.setIcon(beatOffIcon);
                }
                nextBeat=1;
            }
        }
        else if(beat==1)
        {
           if(on)
           {
                if(timeSignature.getSelectedIndex()==3 || timeSignature.getSelectedIndex()==2)
                {
                    beat1.setIcon(accentBeatOn);
                }
                else
                {
                    beat1.setIcon(beatOnIcon);
                }
            }
            else
            {
                if(timeSignature.getSelectedIndex()==3 || timeSignature.getSelectedIndex()==2)
                {
                    beat1.setIcon(accentBeatOff);
                }
                else
                {
                    beat1.setIcon(beatOffIcon);
                }
                nextBeat=2;
            }
        }
        else if(beat==2)
        {
            if(on)
            {
                if(timeSignature.getSelectedIndex()==3 || timeSignature.getSelectedIndex()==2)
                {
                    beat2.setIcon(accentBeatOn);
                }
                else
                {
                    beat2.setIcon(beatOnIcon);
                }    
            }
            else
            {
                if(timeSignature.getSelectedIndex()==3 || timeSignature.getSelectedIndex()==2)
                {
                    beat2.setIcon(accentBeatOff);
                }
                else
                {
                    beat2.setIcon(beatOffIcon);
                }
                if(timeSignature.getSelectedIndex()==1)//If 3/4 time signature is selected, loop after the 3rd beat
                {
                   nextBeat=0;
                }
                else
                {
                   nextBeat=3;
                }
            }
        }
        else if(beat==3)
        {
            
            if(on)
            {
                {
                    beat3.setIcon(beatOnIcon);
                } 
            }
            else
            {
                {
                    beat3.setIcon(beatOffIcon);
                }
                if(timeSignature.getSelectedIndex()==0)//If 4/4 time signature is selected, loop after the 4th beat
                {
                     nextBeat=0;
                }
                else
                {
                    nextBeat=4;
                }
            }
        }
        else if(beat==4)
        { 
           if(on)
           {
                if(timeSignature.getSelectedIndex()==3 || timeSignature.getSelectedIndex()==2)
                {
                    beat4.setIcon(accentBeatOn);
                }
                else
                {
                    beat4.setIcon(beatOnIcon);
                }
                
                
            }
            else
            {
                if(timeSignature.getSelectedIndex()==3 || timeSignature.getSelectedIndex()==2)
                {
                    beat4.setIcon(accentBeatOff);
                }
                else
                {
                    beat4.setIcon(beatOffIcon);
                }
                nextBeat=5;
            }
        }
        else if(beat==5)
        {
           if(on)
           {
                if(timeSignature.getSelectedIndex()==3 || timeSignature.getSelectedIndex()==2)
                {
                    beat5.setIcon(accentBeatOn);
                }
                else
                {
                    beat5.setIcon(beatOnIcon);
                } 
            }
            else
            {
                if(timeSignature.getSelectedIndex()==3 || timeSignature.getSelectedIndex()==2)
                {
                    beat5.setIcon(accentBeatOff);
                }
                else
                {
                    beat5.setIcon(beatOffIcon);
                }
                if(timeSignature.getSelectedIndex()==2)//If the 6/8 time signature is selected loop after the 6th beat
                {
                     nextBeat=0;
                }
                else
                {
                    nextBeat=6;
                }
            }
        }
        else if(beat==6)
        { 
            if(on)
           {
                if(timeSignature.getSelectedIndex()==3)
                {
                    beat6.setIcon(accentBeatOn);
                }
                else
                {
                    beat6.setIcon(beatOnIcon);
                } 
            }
            else
            {
                if(timeSignature.getSelectedIndex()==3)
                {
                    beat6.setIcon(accentBeatOff);
                }
                else
                {
                    beat6.setIcon(beatOffIcon);
                }
                nextBeat=7;
            }
        }
        else if(beat==7)
        { 
            if(on)
           {
                if(timeSignature.getSelectedIndex()==3)
                {
                    beat7.setIcon(accentBeatOn);
                }
                else
                {
                    beat7.setIcon(beatOnIcon);
                }
                
                
            }
            else
            {
                if(timeSignature.getSelectedIndex()==3)
                {
                    beat7.setIcon(accentBeatOff);
                }
                else
                {
                    beat7.setIcon(beatOffIcon);
                }
                nextBeat=8;
            }
        }
        else if(beat==8)
        { 
            if(on)
           {
                if(timeSignature.getSelectedIndex()==3)
                {
                    beat8.setIcon(accentBeatOn);
                }
                else
                {
                    beat8.setIcon(beatOnIcon);
                }   
            }
            else
            {
                if(timeSignature.getSelectedIndex()==3)
                {
                    beat8.setIcon(accentBeatOff);
                }
                else
                {
                    beat8.setIcon(beatOffIcon);
                }
                nextBeat=9;
            }
        }
        else if(beat==9)
        { 
            if(on)
            {
                beat9.setIcon(beatOnIcon);
                
            }
            else
            {
                beat9.setIcon(beatOffIcon);
                nextBeat=10;
            }
        }
        else if(beat==10)
        { 
           if(on)
           {
                if(timeSignature.getSelectedIndex()==3)
                {
                    beat10.setIcon(accentBeatOn);
                }
                else
                {
                    beat10.setIcon(beatOnIcon);
                }
            }
            else
            {
                if(timeSignature.getSelectedIndex()==3)
                {
                    beat10.setIcon(accentBeatOff);
                }
                else
                {
                    beat10.setIcon(beatOffIcon);
                }
                nextBeat=11;
            }
        }
        else if(beat==11)
        { 
             if(on)
           {
                if(timeSignature.getSelectedIndex()==3)
                {
                    beat11.setIcon(accentBeatOn);
                }
                else
                {
                    beat11.setIcon(beatOnIcon);
                }  
            }
            else
            {
                if(timeSignature.getSelectedIndex()==3)
                {
                    beat11.setIcon(accentBeatOff);
                }
                else
                {
                    beat11.setIcon(beatOffIcon);
                }
                nextBeat=0;
            }
        }
    }
    
    private void initImg()
    {
        beatOffIcon=createImageIcon("img/metronome_beat_off.png",false);
        beatOnIcon=createImageIcon("img/metronome_beat_on.png",false);
        accentBeatOn=createImageIcon("img/metronome_beat_on.png",true);
        accentBeatOff=createImageIcon("img/metronome_beat_off.png",true);
    }
    
    private void createImg()//Method that creates and sets the Icons for the JLabels
    {
        
        if(timeSignature.getSelectedIndex()==0)// 4/4 time signature
        { 
            beat0.setIcon(beatOffIcon);
            setLabelLocation(beat0,55,60); 
            beat1.setIcon(beatOffIcon);
            setLabelLocation(beat1,90,60);
            beat2.setIcon(beatOffIcon);
            setLabelLocation(beat2,125,60);
            beat3.setIcon(beatOffIcon);
            setLabelLocation(beat3,160,60);
        }
        else if(timeSignature.getSelectedIndex()==1)// 3/4 time signature
        {
            beat0.setIcon(beatOffIcon);
            setLabelLocation(beat0,74,60);
            beat1.setIcon(beatOffIcon);
            setLabelLocation(beat1,109,60);
            beat2.setIcon(beatOffIcon);
            setLabelLocation(beat2,144,60);
        }
        else if(timeSignature.getSelectedIndex()==2)// 6/8 time signature
        {
            beat0.setIcon(beatOffIcon);
            setLabelLocation(beat0,20,60);
            beat1.setIcon(accentBeatOff);
            setLabelLocation(beat1,55,60);
            beat2.setIcon(accentBeatOff);
            setLabelLocation(beat2,90,60);
            beat3.setIcon(beatOffIcon);
            setLabelLocation(beat3,125,60);
            beat4.setIcon(accentBeatOff);
            setLabelLocation(beat4,160,60);
            beat5.setIcon(accentBeatOff);
            setLabelLocation(beat5,195,60); 
        }
        else if(timeSignature.getSelectedIndex()==3)// 12/8 time signature
        {
            beat0.setIcon(accentBeatOff);
            setLabelLocation(beat0,0,60);
            beat1.setIcon(accentBeatOff);
            setLabelLocation(beat1,20,60);
            beat2.setIcon(accentBeatOff);
            setLabelLocation(beat2,40,60);
            beat3.setIcon(beatOffIcon);
            setLabelLocation(beat3,60,60);
            beat4.setIcon(accentBeatOff);
            setLabelLocation(beat4,80,60);
            beat5.setIcon(accentBeatOff);
            setLabelLocation(beat5,100,60);
            beat6.setIcon(accentBeatOff);
            setLabelLocation(beat6,120,60);
            beat7.setIcon(accentBeatOff);
            setLabelLocation(beat7,140,60);
            beat8.setIcon(accentBeatOff);
            setLabelLocation(beat8,160,60);
            beat9.setIcon(beatOffIcon);
            setLabelLocation(beat9,180,60);
            beat10.setIcon(accentBeatOff);
            setLabelLocation(beat10,200,60);
            beat11.setIcon(accentBeatOff);
            setLabelLocation(beat11,220,60);  
        }
        main_body.repaint();//Draw the changes on the JFrame
    }
    
    private void clearImg()// Clears the icons of the visualizer when changing time signatures
    {
         beat0.setIcon(null);
         beat1.setIcon(null);
         beat2.setIcon(null);
         beat3.setIcon(null);
         beat4.setIcon(null);
         beat5.setIcon(null);
         beat6.setIcon(null);
         beat7.setIcon(null);
         beat8.setIcon(null);
         beat9.setIcon(null);
         beat10.setIcon(null);
         beat11.setIcon(null);
    }
    
    private ImageIcon createImageIcon(String path, boolean accent)//Creates the Icons for the JLabels 
    {
        java.net.URL imgURL = MainWindow.class.getClassLoader().getResource(path);
        System.out.println(imgURL);
            if (imgURL != null)
            {
                if(!accent)
                {
                    return new ImageIcon(new ImageIcon(imgURL).getImage().getScaledInstance(35, 47, Image.SCALE_DEFAULT));
                }
                else
                {
                    return new ImageIcon(new ImageIcon(imgURL).getImage().getScaledInstance(30, 40, Image.SCALE_DEFAULT));
                }
                //return new ImageIcon(imgURL);
            } 
            else 
            {
                System.err.println("Couldn't find file: " + path);
                return null;
            }
    }
    private void setLabelLocation(JLabel label, int x, int y)
    {
        label.setBorder(BorderFactory.createEmptyBorder());
        label.setSize(35,50);
        label.setLocation(x, y);
    }
    
    private void timeSignatureItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_timeSignatureItemStateChanged
    {//GEN-HEADEREND:event_timeSignatureItemStateChanged
        //Handles the behavior of Time Signature combobox 
        if(isPlaying)
        {
            timeSignature.setEnabled(false);
        }
        else
        {
           System.out.println("Selection: "+timeSignature.getSelectedIndex());
            timeSignature.setEnabled(true);
            if(timeSignature.getSelectedIndex()==0)//Handles the different midi files
            {
                mh.setAudioTrack("midi/4_4.mid");
                clearImg();
                createImg();
                mh.setupHandler();
            }
            else if(timeSignature.getSelectedIndex()==1)
            {
                mh.setAudioTrack("midi/3_4.mid"); 
                clearImg();
                createImg();
                mh.setupHandler();
            }
            else if(timeSignature.getSelectedIndex()==2)
            {
                mh.setAudioTrack("midi/6_8.mid");
                clearImg();
                createImg();
                mh.setupHandler();
            }
            else if(timeSignature.getSelectedIndex()==3)
            {
                mh.setAudioTrack("midi/12_8.mid");
                clearImg();
                createImg();
                mh.setupHandler();
            }
        }
    }//GEN-LAST:event_timeSignatureItemStateChanged
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run() 
            {
                new MainWindow().setVisible(true);
            }
        });
    }

    private int nextBeat;
    private ImageIcon beatOffIcon;
    private ImageIcon beatOnIcon;
    private ImageIcon accentBeatOn;
    private ImageIcon accentBeatOff;
    private javax.swing.JLabel beat0;
    private javax.swing.JLabel beat1;
    private javax.swing.JLabel beat2;
    private javax.swing.JLabel beat3;
    private javax.swing.JLabel beat4;
    private javax.swing.JLabel beat5;
    private javax.swing.JLabel beat6;
    private javax.swing.JLabel beat7;
    private javax.swing.JLabel beat8;
    private javax.swing.JLabel beat9;
    private javax.swing.JLabel beat10;
    private javax.swing.JLabel beat11;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner bpmModifier;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JPanel header;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel main_body;
    private javax.swing.JButton startButton;
    private javax.swing.JComboBox<String> timeSignature;
    // End of variables declaration//GEN-END:variables
}
